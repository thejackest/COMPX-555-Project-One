# Remove contig and make data a single continuous line
awk 'NR>1 {print $0}' contig00121.txt | tr -d '\n' > Sequence.txt


# For loop to run through file to find a start, then a second loop to find an end, when an end is
#found, start to end will be printed, this runs to end of file then finds next start
#outputs with length, sorts by length and then cuts length from final file
awk '{for (i = 0; i <= length($0); i++)
{
	if(substr($0,i,3) ~ /A[TU]G/)
	{
		for(j=i; j <= length($0); j+=3) 
		{
			if(substr($0,j,3) ~ /[UT]GA|[UT]A[GA]/)
			{
				if(length(substr($0,i,j-i+3))>6)
				{
					print length(substr($0,i,j-i+3)),substr($0,i,j-i+3)
					break;
				}
			}
		}
	}
}}
' Sequence.txt | sort -n |sed -E -e 's/^[0-9]+ //' > PotentialGenes.txt

# Creates complement strand file
awk '{gsub("A","X");gsub("C","Z");gsub("G","C")gsub("Z","G");gsub("T","A");gsub("X","T");print}' PotentialGenes.txt > Complement.txt

#create reverse complement
awk '{gsub("A","U");gsub("C","Z");gsub("G","C")gsub("Z","G");gsub("T","A");print}' Complement.txt > ReverseComplement.txt

#Substitutes complements with corresponding amino acids 
awk '
{
	out = "";
	for (i = 0; i < length($0); i+=3)
	{
		tuple = substr($0,i,3);
		gsub(/UU[UC]/, "F", tuple); #Phenylalanine	
		gsub(/UU[AG]|CU[UCAG]/, "L", tuple);#Leucine
		gsub(/AU[UCA]/, "I", tuple); #Isoleucine
		gsub(/AUG/,"M", tuple); #Methionine
		gsub(/GU[UCAG]/, "V", tuple); #Valine
		gsub(/UC[UCAG]|AG[UC]/, "S", tuple); #Serine
		gsub(/CC[UCAG]/, "P", tuple); #Proline
		gsub(/AC[UCAG]/, "T", tuple); #Threonine
		gsub(/GC[UCAG]/, "A", tuple); #Alanine
		gsub(/UA[UC]/, "Y", tuple); #Tyrosine
		gsub(/UA[AG]|UGA/, "", tuple);# stop
		gsub(/CA[UC]/, "H", tuple); #Histidine
		gsub(/CA[AG]/, "Q", tuple); #Glutamine
		gsub(/AA[UC]/, "N", tuple); #Asparagine
		gsub(/AA[AG]/, "K", tuple); #Lysine
		gsub(/GA[UC]/, "D", tuple);#aspartic acid
		gsub(/GA[AG]/, "E", tuple); #Glutamic acid
		gsub(/UG[UC]/, "C", tuple); #Cysteine
		gsub(/UGG/, "W", tuple); #Tryptophan
		gsub(/CG[UCAG]|AG[AG]/, "R", tuple); #Arginine
		gsub(/GG[UCAG]/, "G", tuple); #Glycine
		if (tuple != "")
		{
			out = out tuple
		}
	}
	print out
}' ReverseComplement.txt > aminoAcids.txt

